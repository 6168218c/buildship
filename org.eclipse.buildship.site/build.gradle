apply plugin: eclipsebuild.UpdateSitePlugin
apply plugin: 'org.hidetake.ssh'

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'org.hidetake:gradle-ssh-plugin:1.1.2' }
}

updateSite {
    extraResources = files('epl-v10.html', 'notice.html')
    signBundles = true
}

remotes {
    eclipseDotOrg {
        host = ECLIPSE_ORG_HOST
        user =  ECLIPSE_ORG_USER
        password = ECLIPSE_ORG_PASSWORD
        knownHosts = project.rootProject.file('gradle/ssh/known_hosts')
    }
}

dependencies {
    compile project(':org.eclipse.buildship.core')
    compile project(':org.eclipse.buildship.ui')
    compile project(':org.eclipse.buildship.branding')
    compile project(':org.eclipse.buildship.feature')
}

createP2Repository.doLast {
  logger.info("Adding p2.mirrorsURL property to the artifact.xml file")

  // get the artifacts.xml file from the artifacts.jar
  def artifactsJarFile = new File(buildDir, "repository/artifacts.jar")
  def artifactsXmlFile = zipTree(artifactsJarFile).matching { 'artifacts.xml' }.singleFile

  // parse the xml
  def xml = new XmlParser().parse(artifactsXmlFile)

  // get the repository 'properties' node and append the extra information there
  def propertiesNode = xml.depthFirst().find { it.parent()?.name() == 'repository' && it.name() == 'properties' }
  new Node(propertiesNode, 'property', ['name': 'p2.mirrorsURL', 'value': calculateP2MirrorUrl(project)])

  // write the updated artifacts.xml back to its source
  // the artifacts.xml is a temporary file hence it has to be copied back to the archive
  new XmlNodePrinter(new PrintWriter(new FileWriter(artifactsXmlFile)), "  ", "'").print(xml)
  ant.zip(update: true, filesonly: true, destfile: artifactsJarFile) { fileset(file: artifactsXmlFile) }
}

def calculateP2MirrorUrl(Project project) {
  def config = eclipsebuild.BuildshipConfig.on(project)
  def repositoryPath = "${mainFolder(config)}/${releaseVersion()}/${project.version}"
  "http://www.eclipse.org/downloads/download.php?file=${repositoryPath}&format=xml"
}

task uploadUpdateSite(dependsOn : 'createP2Repository') {
    description = "Uploads the generated update site to the eclipse.org server."

    doLast {
        def config = eclipsebuild.BuildshipConfig.on(project)

        // folder structure
        // releases                    (main folder - composite update site if release repository)
        //  |--1.0                     (version folder - always a composite update site)
        //     |--1.0.0.v20150413-1512 (repository folder - simple update site)

        // define the folder structure
        def mainFolder = mainFolder(config)
        def versionFolder = "${mainFolder}/${releaseVersion()}"
        def repositoryFolder = "${versionFolder}/${project.version}"

        // create composite update site for the root of the release repository and for the versions folder
        def compositeFolders = config.isRelease() ? [mainFolder, versionFolder]: [versionFolder]

        // upload the update site and update the composite descriptors
        ssh.run {
            session(remotes.eclipseDotOrg) {
                // create the leaf directory if not exist
                execute "mkdir -p $repositoryFolder"

                // copy the update site from the build directory to the remote location
                put from: files { file("$buildDir/repository").listFiles() }, into: repositoryFolder

                // recreate the compositeArtifacts.jar and the compositeContent.jar files
                compositeFolders.each { execute("""cd ${it}
                      ${file('updateCompositeUpdateSite.sh').text}""") }
            }
        }
    }
}

def mainFolder(eclipsebuild.BuildshipConfig config) {
    config.isRelease() ? "${ECLIPSE_ORG_LOCATION}/releases" :
            config.isMilestone() ? "${ECLIPSE_ORG_LOCATION}/milestones" :
            config.isSnapshot() ? "${ECLIPSE_ORG_LOCATION}/snapshots" :
            null
}

def releaseVersion() {
    // crop the major.minor segment from the version number
    def matcher = version =~ /(\d+\.\d+)\.\d+\..*/
    matcher[0][1]
}
