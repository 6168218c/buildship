package org.eclipse.buildship.ui.view.execution

import org.gradle.tooling.events.OperationDescriptor
import org.gradle.tooling.events.StartEvent
import org.gradle.tooling.events.task.TaskOperationDescriptor
import org.gradle.tooling.events.test.JvmTestOperationDescriptor

import com.gradleware.tooling.toolingclient.GradleDistribution

import org.eclipse.core.runtime.IPath
import org.eclipse.core.runtime.Path
import org.eclipse.jdt.core.IJavaElement

import org.eclipse.buildship.core.Logger
import org.eclipse.buildship.core.launch.GradleRunConfigurationAttributes
import org.eclipse.buildship.ui.test.fixtures.ProjectSynchronizationSpecification

class OpenTestSourceFileJobTest extends ProjectSynchronizationSpecification {

    def "Opening a source fails silently if the source file is not available"() {
        setup:
        Logger logger = Mock(Logger)
        environment.registerService(Logger, logger)
        OpenFileResultHandler resultHander = Mock(OpenFileResultHandler)
        File projectDir = dir('sample-project')
        importAndWait(projectDir)

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(':test', 'NonexistingClassName'))
        openSourceAndWait(projectDir, resultHander, methodOperationItem(':test', 'NonexistingClassName', 'NonexistingMethodName'))

        then:
        0 * resultHander.openJavaSource(_)
        0 * resultHander.openGenericSource(_,_)
        0 * logger.warn(*_)
        0 * logger.error(*_)
    }

    def "Can open sources in a single-module build"() {
        setup:
        OpenFileResultHandler resultHander = Mock(OpenFileResultHandler)
        File projectDir = createSingleModuleProject()
        importAndWait(projectDir)

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(':test', 'MyJavaTest'))

        then:
        1 * resultHander.openJavaSource(_)
        0 * resultHander.openGenericSource(_,_)

        when:
        openSourceAndWait(projectDir, resultHander, methodOperationItem(':test', 'MyJavaTest', 'javaTest'))

        then:
        1 * resultHander.openJavaSource(_)
        0 * resultHander.openGenericSource(_,_)

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(':test', 'MyGroovyTest'))

        then:
        0 * resultHander.openJavaSource(_)
        1 * resultHander.openGenericSource(_,_)

        when:
        openSourceAndWait(projectDir, resultHander, methodOperationItem(':test', 'MyGroovyTest', 'groovyTest'))

        then:
        0 * resultHander.openJavaSource(_)
        1 * resultHander.openGenericSource(_,_)
    }


    def "Can open sources in a multi-module build"(String projectPath, String expectedJavaFilePath, String expectedGroovyFilePath) {
        setup:
        OpenFileResultHandler resultHander = Mock(OpenFileResultHandler)
        File projectDir = createMultiModuleProject()
        importAndWait(projectDir)
        IPath openedPath

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(projectPath, 'MyJavaTest'))

        then:
        1 * resultHander.openJavaSource(_) >> { IJavaElement element -> openedPath = element.path }
        openedPath == new Path(expectedJavaFilePath)


        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(projectPath, 'MyGroovyTest'))

        then:
        1 * resultHander.openGenericSource(_,_) >> { file, region -> openedPath = file.fullPath }
        openedPath == new Path(expectedGroovyFilePath)

        where:
        projectPath  | expectedJavaFilePath                  | expectedGroovyFilePath
        ':sub1:test' | '/sub1/src/test/java/MyJavaTest.java' | '/sub1/src/test/groovy/MyGroovyTest.groovy'
        ':sub2:test' | '/sub2/src/test/java/MyJavaTest.java' | '/sub2/src/test/groovy/MyGroovyTest.groovy'

    }

    def "If the workspace project can't be identified then the search falls back to the workspace scope"() {
        setup:
        File projectDir = createSingleModuleProject()
        OpenFileResultHandler resultHander = Mock(OpenFileResultHandler)
        importAndWait(projectDir)

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(':nonexistingmodule:test', 'MyJavaTest'))

        then:
        1 * resultHander.openJavaSource(_)
        0 * resultHander.openGenericSource(_,_)

        when:
        openSourceAndWait(projectDir, resultHander, classOperationItem(':nonexistingmodule:test', 'MyGroovyTest'))

        then:
        0 * resultHander.openJavaSource(_)
        1 * resultHander.openGenericSource(_,_)
    }

    private File createSingleModuleProject() {
        File projectDir = dir('sample-project') {
            file 'settings.gradle'
            file 'build.gradle',
            """allprojects {
                   apply plugin: 'groovy'
                   repositories { jcenter() }
                   dependencies { testCompile 'org.codehaus.groovy:groovy:2.4.6' }
              }
            """
            dir('src/test/java') { file 'MyJavaTest.java', 'public class MyJavaTest { void javaTest() {} }' }
            dir('src/test/groovy') { file 'MyGroovyTest.groovy', 'class MyGroovyTest { void groovyTest() {} }' }
        }
    }

    private File createMultiModuleProject() {
        File projectDir = dir('sample-multimodule-project') {
            file 'settings.gradle', 'include "sub1"; include "sub2"'
            file 'build.gradle',
            """allprojects {
                   apply plugin: 'groovy'
                   repositories { jcenter() }
                   dependencies { testCompile 'org.codehaus.groovy:groovy:2.4.6' }
              }
            """
            dir('sub1/src/test/java') { file 'MyJavaTest.java', 'public class MyJavaTest { void javaTest() {} }' }
            dir('sub2/src/test/java') { file 'MyJavaTest.java', 'public class MyJavaTest { void javaTest() {} }' }
            dir('sub1/src/test/groovy') { file 'MyGroovyTest.groovy', 'class MyGroovyTest { void groovyTest() {} }' }
            dir('sub2/src/test/groovy') { file 'MyGroovyTest.groovy', 'class MyGroovyTest { void groovyTest() {} }' }
        }
    }

    private void importThenOpenSource(projectDir, OpenFileResultHandler resultHandler, OperationItem... operationItems) {
        importAndWait(projectDir)
        OpenTestSourceFileJob job = new OpenTestSourceFileJob(operationItems as List, attributes(projectDir), resultHandler)
        job.schedule()
        job.join()
    }

    private void openSourceAndWait(projectDir, OpenFileResultHandler resultHandler, OperationItem... operationItems) {
        OpenTestSourceFileJob job = new OpenTestSourceFileJob(operationItems as List, attributes(projectDir), resultHandler)
        job.schedule()
        job.join()
    }

    private OperationItem methodOperationItem(String taskPath, String className, String methodName) {
        StartEvent startEvent = Mock(StartEvent)
        startEvent.getDescriptor() >> testMethodDescriptor(taskPath, className, methodName)
        new OperationItem(startEvent)
    }

    private OperationItem classOperationItem(String taskPath, String className) {
        StartEvent startEvent = Mock(StartEvent)
        startEvent.getDescriptor() >> testClassDescriptor(taskPath, className)
        new OperationItem(startEvent)
    }

    private JvmTestOperationDescriptor testMethodDescriptor(String taskPath, String className, String methodName) {
        JvmTestOperationDescriptor descriptor = operationDescriptorMock(methodName, "Test $methodName($className)", JvmTestOperationDescriptor)
        descriptor.getClassName() >> className
        descriptor.getMethodName() >> methodName
        descriptor.getParent() >> testClassDescriptor(taskPath, className)
        descriptor
    }

    private JvmTestOperationDescriptor testClassDescriptor(String taskPath, String className) {
        JvmTestOperationDescriptor descriptor = operationDescriptorMock(className, "Test class $className", JvmTestOperationDescriptor)
        descriptor.getClassName() >> className
        descriptor.getParent() >> testTaskDescriptor(taskPath)
        descriptor
    }

    private OperationDescriptor testTaskDescriptor(String taskPath) {
        OperationDescriptor executer = operationDescriptorMock('Gradle Test Executor 1')
        OperationDescriptor testRun = operationDescriptorMock("Gradle Test Run $taskPath")
        TaskOperationDescriptor testTask = operationDescriptorMock(taskPath, TaskOperationDescriptor)
        testTask.getTaskPath() >> taskPath
        executer.getParent() >> testRun
        testRun.getParent() >> testTask
        executer
    }

    private OperationDescriptor operationDescriptorMock(String name, Class cls = OperationDescriptor) {
        operationDescriptorMock(name, name, cls)
    }

    private OperationDescriptor operationDescriptorMock(String name, String displayName, Class cls = OperationDescriptor) {
        def descriptor = Mock(cls)
        descriptor.getName() >> name
        descriptor.getDisplayName() >> displayName
        descriptor
    }

    private GradleRunConfigurationAttributes attributes(File projectDir) {
        return GradleRunConfigurationAttributes.with([], projectDir.absolutePath, GradleDistribution.fromBuild(), null, null, [], [], false, false)
    }
}
